---
kind: pipeline
type: docker
name: checks

platform:
  os: linux
  arch: amd64

steps:
  - name: lint
    image: golangci/golangci-lint:v2.4-alpine
    environment:
      CGO_ENABLED: 1
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
      - go mod download
      - golangci-lint run --timeout=10m
    when:
      event:
        - pull_request
        - tag

  - name: format-check
    image: golang:1.24-alpine
    commands:
      - gofmt -l . | tee /tmp/fmt-diff
      - test ! -s /tmp/fmt-diff || (echo "Code not formatted properly:" && cat /tmp/fmt-diff && exit 1)
    when:
      event:
        - pull_request
        - tag

  - name: build-check
    image: golang:1.24-alpine
    environment:
      CGO_ENABLED: 1
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
      - go mod download
      - go build -v ./...
    when:
      event:
        - pull_request
        - tag

  - name: test
    image: golang:1.24-alpine
    environment:
      CGO_ENABLED: 1
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
      - go mod download
      - go test -v -race -cover ./...
    depends_on:
      - lint
      - format-check
      - build-check
    when:
      event:
        - pull_request
        - tag

---
kind: pipeline
type: docker
name: release

platform:
  os: linux
  arch: amd64

depends_on:
  - checks

trigger:
  event:
    - tag

steps:
  - name: prepare-release
    image: golang:1.24-alpine
    environment:
      CGO_ENABLED: 1
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zip
      - mkdir -p dist
    
  - name: build-linux-amd64
    image: golang:1.24-alpine
    environment:
      CGO_ENABLED: 1
      GOOS: linux
      GOARCH: amd64
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zip
      - go build -ldflags "-s -w -X main.Version=${DRONE_TAG}" -o dist/meshgo-linux-amd64 ./cmd/meshgo
      - cd dist && zip -9 meshgo-linux-amd64.zip meshgo-linux-amd64
    depends_on:
      - prepare-release


  - name: build-windows-amd64
    image: golang:1.24-alpine
    environment:
      CGO_ENABLED: 1
      GOOS: windows
      GOARCH: amd64
      CC: x86_64-w64-mingw32-gcc
      CXX: x86_64-w64-mingw32-g++
    commands:
      - apk add --no-cache git ca-certificates build-base pkgconfig zip mingw-w64-gcc
      - go build -ldflags "-s -w -X main.Version=${DRONE_TAG}" -o dist/meshgo-windows-amd64.exe ./cmd/meshgo
      - cd dist && zip -9 meshgo-windows-amd64.zip meshgo-windows-amd64.exe
    depends_on:
      - prepare-release

  # Temporarily commenting out macOS build due to compatibility issues
  # - name: build-darwin-amd64
  #   image: golang:1.24-alpine
  #   environment:
  #     CGO_ENABLED: 0
  #     GOOS: darwin
  #     GOARCH: amd64
  #   commands:
  #     # Note: macOS builds with CGO require specific setup that may not work in standard Docker
  #     # Building without CGO to avoid OpenGL and other native dependency issues
  #     - apk add --no-cache git ca-certificates zip
  #     - go build -ldflags "-s -w -X main.Version=${DRONE_TAG}" -o dist/meshgo-darwin-amd64 ./cmd/meshgo
  #     - cd dist && zip -9 meshgo-darwin-amd64.zip meshgo-darwin-amd64
  #   depends_on:
  #     - prepare-release
  #   failure: ignore


  - name: create-release
    image: plugins/gitea-release
    settings:
      base_url:
        from_secret: forgejo_base_url
      api_key:
        from_secret: forgejo_token
      title: "MeshGo ${DRONE_TAG}"
      note: >
        ## MeshGo ${DRONE_TAG}


        This is an automated release of MeshGo built from tag `${DRONE_TAG}`.


        ### Downloads


        Choose the appropriate binary for your platform:

        - **Linux AMD64**: `meshgo-linux-amd64.zip` - For most Linux systems

        - **Windows AMD64**: `meshgo-windows-amd64.zip` - For Windows 10/11 64-bit


        ### Installation


        1. Download the appropriate ZIP file for your platform

        2. Extract the binary from the ZIP file

        3. Make the binary executable (Linux): `chmod +x meshgo*`

        4. Run the application: `./meshgo` (or `meshgo.exe` on Windows)


        ### Changes


        See the [commit history](${DRONE_REPO_LINK}/commits/${DRONE_TAG}) for detailed changes in this release.
      files:
        - dist/meshgo-linux-amd64.zip
        - dist/meshgo-windows-amd64.zip
      checksum:
        - sha256
        - sha512
      draft: false
      prerelease: false
    depends_on:
      - build-linux-amd64
      - build-windows-amd64

---
kind: secret
name: forgejo_token